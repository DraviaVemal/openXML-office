// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package global_2007

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ThemePalletModel struct {
	_tab flatbuffers.Table
}

func GetRootAsThemePalletModel(buf []byte, offset flatbuffers.UOffsetT) *ThemePalletModel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ThemePalletModel{}
	x.Init(buf, n+offset)
	return x
}

func FinishThemePalletModelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsThemePalletModel(buf []byte, offset flatbuffers.UOffsetT) *ThemePalletModel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ThemePalletModel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedThemePalletModelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ThemePalletModel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ThemePalletModel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ThemePalletModel) Accent1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Accent2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Accent3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Accent4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Accent5() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Accent6() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Dark1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Dark2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Light1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Light2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) Hyperlink() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ThemePalletModel) FollowedHyperlink() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ThemePalletModelStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func ThemePalletModelAddAccent1(builder *flatbuffers.Builder, accent1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accent1), 0)
}
func ThemePalletModelAddAccent2(builder *flatbuffers.Builder, accent2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(accent2), 0)
}
func ThemePalletModelAddAccent3(builder *flatbuffers.Builder, accent3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(accent3), 0)
}
func ThemePalletModelAddAccent4(builder *flatbuffers.Builder, accent4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(accent4), 0)
}
func ThemePalletModelAddAccent5(builder *flatbuffers.Builder, accent5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(accent5), 0)
}
func ThemePalletModelAddAccent6(builder *flatbuffers.Builder, accent6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(accent6), 0)
}
func ThemePalletModelAddDark1(builder *flatbuffers.Builder, dark1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(dark1), 0)
}
func ThemePalletModelAddDark2(builder *flatbuffers.Builder, dark2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(dark2), 0)
}
func ThemePalletModelAddLight1(builder *flatbuffers.Builder, light1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(light1), 0)
}
func ThemePalletModelAddLight2(builder *flatbuffers.Builder, light2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(light2), 0)
}
func ThemePalletModelAddHyperlink(builder *flatbuffers.Builder, hyperlink flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(hyperlink), 0)
}
func ThemePalletModelAddFollowedHyperlink(builder *flatbuffers.Builder, followedHyperlink flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(followedHyperlink), 0)
}
func ThemePalletModelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
