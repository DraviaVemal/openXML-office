// automatically generated by the FlatBuffers compiler, do not modify

package openxml_office.spreadsheet_2007;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ExcelPropertiesModel extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ExcelPropertiesModel getRootAsExcelPropertiesModel(ByteBuffer _bb) { return getRootAsExcelPropertiesModel(_bb, new ExcelPropertiesModel()); }
  public static ExcelPropertiesModel getRootAsExcelPropertiesModel(ByteBuffer _bb, ExcelPropertiesModel obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ExcelPropertiesModel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean isInMemory() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createExcelPropertiesModel(FlatBufferBuilder builder,
      boolean isInMemory) {
    builder.startTable(1);
    ExcelPropertiesModel.addIsInMemory(builder, isInMemory);
    return ExcelPropertiesModel.endExcelPropertiesModel(builder);
  }

  public static void startExcelPropertiesModel(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addIsInMemory(FlatBufferBuilder builder, boolean isInMemory) { builder.addBoolean(0, isInMemory, false); }
  public static int endExcelPropertiesModel(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishExcelPropertiesModelBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedExcelPropertiesModelBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ExcelPropertiesModel get(int j) { return get(new ExcelPropertiesModel(), j); }
    public ExcelPropertiesModel get(ExcelPropertiesModel obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

