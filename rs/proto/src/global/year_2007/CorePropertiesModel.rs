// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/global/year_2007/CorePropertiesModel.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OpenXMLOffice.Global_2007.CorePropertiesModel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CorePropertiesModel {
    // message fields
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.CorePropertiesModel.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.CorePropertiesModel.subject)
    pub subject: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.CorePropertiesModel.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.CorePropertiesModel.tags)
    pub tags: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.CorePropertiesModel.category)
    pub category: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.CorePropertiesModel.creator)
    pub creator: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:OpenXMLOffice.Global_2007.CorePropertiesModel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CorePropertiesModel {
    fn default() -> &'a CorePropertiesModel {
        <CorePropertiesModel as ::protobuf::Message>::default_instance()
    }
}

impl CorePropertiesModel {
    pub fn new() -> CorePropertiesModel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &CorePropertiesModel| { &m.title },
            |m: &mut CorePropertiesModel| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "subject",
            |m: &CorePropertiesModel| { &m.subject },
            |m: &mut CorePropertiesModel| { &mut m.subject },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &CorePropertiesModel| { &m.description },
            |m: &mut CorePropertiesModel| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tags",
            |m: &CorePropertiesModel| { &m.tags },
            |m: &mut CorePropertiesModel| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &CorePropertiesModel| { &m.category },
            |m: &mut CorePropertiesModel| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &CorePropertiesModel| { &m.creator },
            |m: &mut CorePropertiesModel| { &mut m.creator },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CorePropertiesModel>(
            "CorePropertiesModel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CorePropertiesModel {
    const NAME: &'static str = "CorePropertiesModel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.title = is.read_string()?;
                },
                18 => {
                    self.subject = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.tags = is.read_string()?;
                },
                42 => {
                    self.category = is.read_string()?;
                },
                50 => {
                    self.creator = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subject);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.tags.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.tags);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.category);
        }
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.creator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.subject.is_empty() {
            os.write_string(2, &self.subject)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.tags.is_empty() {
            os.write_string(4, &self.tags)?;
        }
        if !self.category.is_empty() {
            os.write_string(5, &self.category)?;
        }
        if !self.creator.is_empty() {
            os.write_string(6, &self.creator)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CorePropertiesModel {
        CorePropertiesModel::new()
    }

    fn clear(&mut self) {
        self.title.clear();
        self.subject.clear();
        self.description.clear();
        self.tags.clear();
        self.category.clear();
        self.creator.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CorePropertiesModel {
        static instance: CorePropertiesModel = CorePropertiesModel {
            title: ::std::string::String::new(),
            subject: ::std::string::String::new(),
            description: ::std::string::String::new(),
            tags: ::std::string::String::new(),
            category: ::std::string::String::new(),
            creator: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CorePropertiesModel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CorePropertiesModel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CorePropertiesModel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CorePropertiesModel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0proto/global/year_2007/CorePropertiesModel.proto\x12\x19OpenXMLOffice\
    .Global_2007\"\xb1\x01\n\x13CorePropertiesModel\x12\x14\n\x05title\x18\
    \x01\x20\x01(\tR\x05title\x12\x18\n\x07subject\x18\x02\x20\x01(\tR\x07su\
    bject\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x12\
    \x12\n\x04tags\x18\x04\x20\x01(\tR\x04tags\x12\x1a\n\x08category\x18\x05\
    \x20\x01(\tR\x08category\x12\x18\n\x07creator\x18\x06\x20\x01(\tR\x07cre\
    atorB\x12Z\x10global/year_2007J\x93\x03\n\x06\x12\x04\0\0\x0c\x03\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\"\n\x08\n\x01\
    \x08\x12\x03\x03\0'\n\t\n\x02\x08\x0b\x12\x03\x03\0'\n\n\n\x02\x04\0\x12\
    \x04\x05\0\x0c\x03\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x1b\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x06\x04\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\
    \x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\x0b\x10\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x06\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x04\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x07\x0b\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x07\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\x04\x1b\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x08\x0b\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x08\x19\x1a\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\t\x04\x14\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\x0b\x0f\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\t\x12\x13\n\x0b\n\x04\x04\0\x02\x04\x12\x03\n\
    \x04\x18\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\n\x0b\x13\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\n\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0b\x04\x17\n\x0c\n\x05\x04\0\
    \x02\x05\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0b\
    \x0b\x12\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0b\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CorePropertiesModel::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
