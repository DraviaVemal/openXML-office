// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/global/year_2007/ThemeModel.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OpenXMLOffice.Global_2007.ThemePallet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ThemePallet {
    // message fields
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.accent1)
    pub accent1: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.accent2)
    pub accent2: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.accent3)
    pub accent3: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.accent4)
    pub accent4: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.accent5)
    pub accent5: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.accent6)
    pub accent6: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.dark1)
    pub dark1: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.dark2)
    pub dark2: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.followed_hyperlink)
    pub followed_hyperlink: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.hyperlink)
    pub hyperlink: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.light1)
    pub light1: ::std::string::String,
    // @@protoc_insertion_point(field:OpenXMLOffice.Global_2007.ThemePallet.light2)
    pub light2: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:OpenXMLOffice.Global_2007.ThemePallet.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ThemePallet {
    fn default() -> &'a ThemePallet {
        <ThemePallet as ::protobuf::Message>::default_instance()
    }
}

impl ThemePallet {
    pub fn new() -> ThemePallet {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accent1",
            |m: &ThemePallet| { &m.accent1 },
            |m: &mut ThemePallet| { &mut m.accent1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accent2",
            |m: &ThemePallet| { &m.accent2 },
            |m: &mut ThemePallet| { &mut m.accent2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accent3",
            |m: &ThemePallet| { &m.accent3 },
            |m: &mut ThemePallet| { &mut m.accent3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accent4",
            |m: &ThemePallet| { &m.accent4 },
            |m: &mut ThemePallet| { &mut m.accent4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accent5",
            |m: &ThemePallet| { &m.accent5 },
            |m: &mut ThemePallet| { &mut m.accent5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accent6",
            |m: &ThemePallet| { &m.accent6 },
            |m: &mut ThemePallet| { &mut m.accent6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dark1",
            |m: &ThemePallet| { &m.dark1 },
            |m: &mut ThemePallet| { &mut m.dark1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dark2",
            |m: &ThemePallet| { &m.dark2 },
            |m: &mut ThemePallet| { &mut m.dark2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "followed_hyperlink",
            |m: &ThemePallet| { &m.followed_hyperlink },
            |m: &mut ThemePallet| { &mut m.followed_hyperlink },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hyperlink",
            |m: &ThemePallet| { &m.hyperlink },
            |m: &mut ThemePallet| { &mut m.hyperlink },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "light1",
            |m: &ThemePallet| { &m.light1 },
            |m: &mut ThemePallet| { &mut m.light1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "light2",
            |m: &ThemePallet| { &m.light2 },
            |m: &mut ThemePallet| { &mut m.light2 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ThemePallet>(
            "ThemePallet",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ThemePallet {
    const NAME: &'static str = "ThemePallet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.accent1 = is.read_string()?;
                },
                18 => {
                    self.accent2 = is.read_string()?;
                },
                26 => {
                    self.accent3 = is.read_string()?;
                },
                34 => {
                    self.accent4 = is.read_string()?;
                },
                42 => {
                    self.accent5 = is.read_string()?;
                },
                50 => {
                    self.accent6 = is.read_string()?;
                },
                58 => {
                    self.dark1 = is.read_string()?;
                },
                66 => {
                    self.dark2 = is.read_string()?;
                },
                74 => {
                    self.followed_hyperlink = is.read_string()?;
                },
                82 => {
                    self.hyperlink = is.read_string()?;
                },
                90 => {
                    self.light1 = is.read_string()?;
                },
                98 => {
                    self.light2 = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.accent1.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.accent1);
        }
        if !self.accent2.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.accent2);
        }
        if !self.accent3.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.accent3);
        }
        if !self.accent4.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.accent4);
        }
        if !self.accent5.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.accent5);
        }
        if !self.accent6.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.accent6);
        }
        if !self.dark1.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.dark1);
        }
        if !self.dark2.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.dark2);
        }
        if !self.followed_hyperlink.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.followed_hyperlink);
        }
        if !self.hyperlink.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.hyperlink);
        }
        if !self.light1.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.light1);
        }
        if !self.light2.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.light2);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.accent1.is_empty() {
            os.write_string(1, &self.accent1)?;
        }
        if !self.accent2.is_empty() {
            os.write_string(2, &self.accent2)?;
        }
        if !self.accent3.is_empty() {
            os.write_string(3, &self.accent3)?;
        }
        if !self.accent4.is_empty() {
            os.write_string(4, &self.accent4)?;
        }
        if !self.accent5.is_empty() {
            os.write_string(5, &self.accent5)?;
        }
        if !self.accent6.is_empty() {
            os.write_string(6, &self.accent6)?;
        }
        if !self.dark1.is_empty() {
            os.write_string(7, &self.dark1)?;
        }
        if !self.dark2.is_empty() {
            os.write_string(8, &self.dark2)?;
        }
        if !self.followed_hyperlink.is_empty() {
            os.write_string(9, &self.followed_hyperlink)?;
        }
        if !self.hyperlink.is_empty() {
            os.write_string(10, &self.hyperlink)?;
        }
        if !self.light1.is_empty() {
            os.write_string(11, &self.light1)?;
        }
        if !self.light2.is_empty() {
            os.write_string(12, &self.light2)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ThemePallet {
        ThemePallet::new()
    }

    fn clear(&mut self) {
        self.accent1.clear();
        self.accent2.clear();
        self.accent3.clear();
        self.accent4.clear();
        self.accent5.clear();
        self.accent6.clear();
        self.dark1.clear();
        self.dark2.clear();
        self.followed_hyperlink.clear();
        self.hyperlink.clear();
        self.light1.clear();
        self.light2.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ThemePallet {
        static instance: ThemePallet = ThemePallet {
            accent1: ::std::string::String::new(),
            accent2: ::std::string::String::new(),
            accent3: ::std::string::String::new(),
            accent4: ::std::string::String::new(),
            accent5: ::std::string::String::new(),
            accent6: ::std::string::String::new(),
            dark1: ::std::string::String::new(),
            dark2: ::std::string::String::new(),
            followed_hyperlink: ::std::string::String::new(),
            hyperlink: ::std::string::String::new(),
            light1: ::std::string::String::new(),
            light2: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ThemePallet {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ThemePallet").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ThemePallet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThemePallet {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/global/year_2007/ThemeModel.proto\x12\x19OpenXMLOffice.Global_2\
    007\"\xd2\x02\n\x0bThemePallet\x12\x18\n\x07accent1\x18\x01\x20\x01(\tR\
    \x07accent1\x12\x18\n\x07accent2\x18\x02\x20\x01(\tR\x07accent2\x12\x18\
    \n\x07accent3\x18\x03\x20\x01(\tR\x07accent3\x12\x18\n\x07accent4\x18\
    \x04\x20\x01(\tR\x07accent4\x12\x18\n\x07accent5\x18\x05\x20\x01(\tR\x07\
    accent5\x12\x18\n\x07accent6\x18\x06\x20\x01(\tR\x07accent6\x12\x14\n\
    \x05dark1\x18\x07\x20\x01(\tR\x05dark1\x12\x14\n\x05dark2\x18\x08\x20\
    \x01(\tR\x05dark2\x12-\n\x12followed_hyperlink\x18\t\x20\x01(\tR\x11foll\
    owedHyperlink\x12\x1c\n\thyperlink\x18\n\x20\x01(\tR\thyperlink\x12\x16\
    \n\x06light1\x18\x0b\x20\x01(\tR\x06light1\x12\x16\n\x06light2\x18\x0c\
    \x20\x01(\tR\x06light2B\x12Z\x10global/year_2007J\xdd\x05\n\x06\x12\x04\
    \0\0\x12\x03\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\
    \0\"\n\x08\n\x01\x08\x12\x03\x03\0'\n\t\n\x02\x08\x0b\x12\x03\x03\0'\n\n\
    \n\x02\x04\0\x12\x04\x05\0\x12\x03\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\
    \x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\x04\x17\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\x0b\x12\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x15\x16\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x07\x04\x17\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x04\n\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\x0b\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x07\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\x04\
    \x17\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x08\x0b\x12\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x08\x15\x16\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\x17\n\x0c\n\x05\x04\
    \0\x02\x03\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\
    \x0b\x12\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x15\x16\n\x0b\n\x04\x04\
    \0\x02\x04\x12\x03\n\x04\x17\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\n\x04\
    \n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\n\x0b\x12\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\n\x15\x16\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0b\x04\x17\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x0b\x0b\x12\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0b\
    \x15\x16\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x0c\x04\x15\n\x0c\n\x05\x04\0\
    \x02\x06\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0c\
    \x0b\x10\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0c\x13\x14\n\x0b\n\x04\
    \x04\0\x02\x07\x12\x03\r\x04\x15\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\r\
    \x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\r\x0b\x10\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x03\r\x13\x14\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x0e\x04\
    \"\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\0\x02\
    \x08\x01\x12\x03\x0e\x0b\x1d\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x0e\
    \x20!\n\x0b\n\x04\x04\0\x02\t\x12\x03\x0f\x04\x1a\n\x0c\n\x05\x04\0\x02\
    \t\x05\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x0f\x0b\x14\
    \n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x0f\x17\x19\n\x0b\n\x04\x04\0\x02\n\
    \x12\x03\x10\x04\x17\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x10\x04\n\n\x0c\
    \n\x05\x04\0\x02\n\x01\x12\x03\x10\x0b\x11\n\x0c\n\x05\x04\0\x02\n\x03\
    \x12\x03\x10\x14\x16\n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x11\x04\x17\n\x0c\
    \n\x05\x04\0\x02\x0b\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\0\x02\x0b\x01\
    \x12\x03\x11\x0b\x11\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x11\x14\x16b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ThemePallet::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
