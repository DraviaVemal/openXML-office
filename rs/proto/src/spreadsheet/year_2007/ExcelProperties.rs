// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/spreadsheet/year_2007/ExcelProperties.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OpenXMLOffice.Spreadsheet_2007.ExcelSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExcelSettings {
    // special fields
    // @@protoc_insertion_point(special_field:OpenXMLOffice.Spreadsheet_2007.ExcelSettings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExcelSettings {
    fn default() -> &'a ExcelSettings {
        <ExcelSettings as ::protobuf::Message>::default_instance()
    }
}

impl ExcelSettings {
    pub fn new() -> ExcelSettings {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExcelSettings>(
            "ExcelSettings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExcelSettings {
    const NAME: &'static str = "ExcelSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExcelSettings {
        ExcelSettings::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExcelSettings {
        static instance: ExcelSettings = ExcelSettings {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExcelSettings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExcelSettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExcelSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExcelSettings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:OpenXMLOffice.Spreadsheet_2007.ExcelProperties)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExcelProperties {
    // message fields
    // @@protoc_insertion_point(field:OpenXMLOffice.Spreadsheet_2007.ExcelProperties.settings)
    pub settings: ::protobuf::MessageField<ExcelSettings>,
    // @@protoc_insertion_point(field:OpenXMLOffice.Spreadsheet_2007.ExcelProperties.theme)
    pub theme: ::protobuf::MessageField<super::ThemeModel::ThemePallet>,
    // @@protoc_insertion_point(field:OpenXMLOffice.Spreadsheet_2007.ExcelProperties.core_properties)
    pub core_properties: ::protobuf::MessageField<super::CorePropertiesModel::CorePropertiesModel>,
    // special fields
    // @@protoc_insertion_point(special_field:OpenXMLOffice.Spreadsheet_2007.ExcelProperties.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExcelProperties {
    fn default() -> &'a ExcelProperties {
        <ExcelProperties as ::protobuf::Message>::default_instance()
    }
}

impl ExcelProperties {
    pub fn new() -> ExcelProperties {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExcelSettings>(
            "settings",
            |m: &ExcelProperties| { &m.settings },
            |m: &mut ExcelProperties| { &mut m.settings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ThemeModel::ThemePallet>(
            "theme",
            |m: &ExcelProperties| { &m.theme },
            |m: &mut ExcelProperties| { &mut m.theme },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CorePropertiesModel::CorePropertiesModel>(
            "core_properties",
            |m: &ExcelProperties| { &m.core_properties },
            |m: &mut ExcelProperties| { &mut m.core_properties },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExcelProperties>(
            "ExcelProperties",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExcelProperties {
    const NAME: &'static str = "ExcelProperties";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.settings)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.theme)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.core_properties)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.theme.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.core_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.settings.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.theme.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.core_properties.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExcelProperties {
        ExcelProperties::new()
    }

    fn clear(&mut self) {
        self.settings.clear();
        self.theme.clear();
        self.core_properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExcelProperties {
        static instance: ExcelProperties = ExcelProperties {
            settings: ::protobuf::MessageField::none(),
            theme: ::protobuf::MessageField::none(),
            core_properties: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExcelProperties {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExcelProperties").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExcelProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExcelProperties {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1proto/spreadsheet/year_2007/ExcelProperties.proto\x12\x1eOpenXMLOffic\
    e.Spreadsheet_2007\x1a'proto/global/year_2007/ThemeModel.proto\x1a0proto\
    /global/year_2007/CorePropertiesModel.proto\"\x0f\n\rExcelSettings\"\xf3\
    \x01\n\x0fExcelProperties\x12I\n\x08settings\x18\x01\x20\x01(\x0b2-.Open\
    XMLOffice.Spreadsheet_2007.ExcelSettingsR\x08settings\x12<\n\x05theme\
    \x18\x02\x20\x01(\x0b2&.OpenXMLOffice.Global_2007.ThemePalletR\x05theme\
    \x12W\n\x0fcore_properties\x18\x03\x20\x01(\x0b2..OpenXMLOffice.Global_2\
    007.CorePropertiesModelR\x0ecorePropertiesB\x17Z\x15spreadsheet/year_200\
    7J\xb9\x02\n\x06\x12\x04\0\0\x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\0'\n\x08\n\x01\x08\x12\x03\x03\0,\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0,\n\t\n\x02\x03\0\x12\x03\x05\01\n\t\n\x02\x03\x01\
    \x12\x03\x06\0:\n'\n\x02\x04\0\x12\x04\x08\0\n\x01\"\x1b\x20Add\x20field\
    s\x20here\x20if\x20needed\n\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x15\n\n\
    \n\x02\x04\x01\x12\x04\x0c\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\
    \x08\x17\n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x02\x1d\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03\r\x02\x0f\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\x10\
    \x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x1b\x1c\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x0e\x022\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x0e\
    \x02'\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e(-\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x0e01\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0f\x02D\
    \n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x0f\x02/\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03\x0f0?\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0fBC\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ThemeModel::file_descriptor().clone());
            deps.push(super::CorePropertiesModel::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ExcelSettings::generated_message_descriptor_data());
            messages.push(ExcelProperties::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
